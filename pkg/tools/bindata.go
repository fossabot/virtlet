// Code generated by go-bindata. DO NOT EDIT.
// sources:
// deploy/data/virtlet-ds.yaml
package tools

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _deployDataVirtletDsYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x5a\x5b\x73\xdb\xb8\x15\x7e\xf7\xaf\x38\xb3\x9e\x69\x92\x07\x5a\x76\xa6\xdb\x64\x35\xed\x83\x63\x6b\x5d\xcd\x3a\x96\x46\x72\x9c\x7d\xd3\x80\xe0\x91\x84\x15\x08\xb0\x07\x20\x6d\xf5\xd7\x77\x00\x5e\xc4\x8b\x24\x2b\xf1\x65\x37\x53\x3f\xc9\x00\xce\x87\x73\xbf\x90\x0c\x82\xe0\x88\x25\xe2\x0e\xc9\x08\xad\xfa\x80\x0f\x16\x95\xfb\x69\x7a\xd9\x59\x88\x96\x9d\x1d\xad\x84\x8a\xfa\x70\xc9\x30\xd6\x6a\x8a\xf6\x28\x46\xcb\x22\x66\x59\xff\x08\x40\xb1\x18\xfb\x90\x09\xb2\x12\x6d\xf1\xbf\x49\x18\xc7\x3e\xac\xd2\x10\x03\xb3\x36\x16\xe3\x23\x93\x20\x77\xc7\x2d\xc6\x89\x64\x16\xdd\x6f\x80\x3a\x90\xfb\x6b\x83\xb9\x3f\xc9\x42\x94\xa6\x3c\x01\x40\xa9\xb2\xa2\x7d\xac\x84\x77\x7f\x4b\x6d\xec\x0d\xda\x7b\x4d\xab\x3e\x58\x4a\xb1\x58\x8f\x94\x19\x6b\x29\xf8\xba\x0f\x17\x32\x35\x16\xe9\x57\x41\xc6\x7e\x15\x76\xf9\xef\x9c\xa4\x38\x78\xec\x21\xc6\xc3\x4b\x10\xc6\x03\x80\xd5\xf0\xf6\xec\x1d\xa0\x62\xa1\x44\xb8\xfb\x6c\xdc\x8a\x49\x29\x13\x19\x96\x7c\x00\xd7\xca\x32\xa1\x90\x80\xd0\x58\x46\x1b\xb8\xb7\x56\x43\x88\xc0\x97\xc8\x57\x18\xbd\x03\xa6\x22\x78\xfb\xfe\x9d\x03\x29\x20\xed\x12\x21\x35\x08\x7a\x0e\xca\xa0\xb2\x48\x20\x14\x08\x25\x6a\xb0\x35\xf1\xc6\xc3\xcb\x86\x68\xc7\x10\x6a\x6d\x8d\x25\x96\x40\x42\x9a\x63\x94\x12\x82\x42\x8c\x3c\xa7\x9c\x90\x59\x04\xe6\xb0\xe6\x62\x11\xb3\xc4\xa1\xd7\xcc\xb3\xb1\x5a\x01\x68\x90\x32\xc1\xf1\x9c\x73\x9d\x2a\x7b\xd3\x30\x4b\x75\xa7\x56\x72\xed\xcc\x01\x77\x85\x06\x12\x1d\x19\xd0\xca\x4b\xa3\x74\x84\x06\xee\x85\x5d\x3a\x8f\x22\x36\xc9\xcd\xf6\xaf\x52\x5b\xde\xac\x05\x14\x9b\xcf\x9d\xa8\xeb\x8d\x91\x1d\xf5\x79\x67\x15\x80\xf0\x3f\xa9\x20\x8c\x2e\x53\x12\x6a\x31\xe5\x4b\x8c\x52\x29\xd4\x62\xb8\x50\xba\x5a\x1e\x3c\x20\x4f\xad\x73\xe6\x1a\x65\x8e\x39\x45\x89\xdc\x6a\xba\x45\x8a\x4d\x73\x3b\x80\x98\x59\xbe\x1c\x3c\x24\x84\xc6\xfb\x7f\x73\xdf\x9d\x58\xe1\xba\xdf\x10\xa7\x75\x02\x40\x27\x48\xcc\x6a\xea\xc3\x50\x75\x36\x33\x26\x53\xec\xc0\x3a\xe0\x96\x6e\x9d\xdc\x17\xa5\xdd\x2b\x82\x63\xb8\x5d\x62\xcb\x29\x80\xeb\x44\xa0\x29\x01\xde\x18\x98\x4b\x7c\xc8\xb4\x4c\x63\x84\x88\x44\x56\xf9\xcd\xb1\xf3\x04\x67\x99\x08\xe7\x2c\x95\xd6\xdb\xdf\x5b\x4d\xa6\x0b\xa1\x20\x12\xe4\x1d\x13\x95\x49\x09\x0d\xd8\x25\xdb\x78\xb0\xa7\x13\xe4\x75\xe7\xae\x73\xae\x85\x11\x84\x6b\x90\x22\x74\x77\xc3\xdf\xaa\x38\xc0\x07\x61\x6c\xe9\x06\xce\x5b\x8f\x4a\x29\xf3\xf0\x4e\x08\x13\x46\x18\x38\x7b\x54\xaa\x10\x31\x5b\x60\x1f\x62\x41\x4c\x59\x61\x7a\xcd\x1c\x50\xec\x8f\x53\x29\xcb\x10\x1e\xce\x6f\xb4\x1d\x13\xba\x68\xa9\x4e\x71\x1d\xc7\x4c\x45\x1b\x0d\x07\xd0\xab\x5f\x77\x62\x96\xd5\x56\xae\xa3\xcf\xce\xbf\x4d\x9d\x20\x67\x72\xf5\xd1\x04\x1b\x4d\x06\xb9\x8e\x4c\x10\x09\xaa\x59\x2f\x76\xc4\x63\x66\x97\x7d\xe8\x15\xda\x0c\x9a\x04\x1d\x5c\x4a\x55\x07\x80\x74\xc2\x16\xcc\x3b\x2c\x7c\x12\xb9\x9a\x85\x56\x4c\xee\xb8\xaa\x8e\x51\xe2\x46\x9a\xaf\x90\x8c\xe6\xab\x1d\x44\x19\x23\x47\xd8\xcb\x0f\x9e\x34\x4e\x96\x20\x52\x2f\x76\x50\x3b\x33\xd6\x77\x8f\x61\xae\x29\x77\x15\xa1\x16\xde\x57\xf2\x2b\xa4\x08\x7b\x85\x4b\xf4\xbc\xcd\x4c\xee\x0f\x3e\x2f\x34\x2c\x5e\x5e\x9a\x31\x0a\xa4\x08\xf7\x5c\x1c\xb4\x8f\x54\x42\x63\xb6\x83\xac\xbe\x63\x90\xa7\x24\xec\xda\x05\x14\x3e\xd8\x7a\xf8\x25\x24\x32\x21\x71\x81\x51\x23\x9d\x02\xa0\xca\xba\x3e\x71\x37\x9c\xdc\x5e\x0f\x6e\x67\x97\xc3\xe9\xf9\xa7\xeb\xc1\xec\xb7\xbb\xcf\x35\x2c\x1f\xdc\xbf\x92\x8e\x9b\xf1\x9d\xa7\xdc\xcf\x2c\xf9\x0d\xd7\x13\x9c\xb7\x83\xbf\x51\xf1\x82\xfc\x70\xeb\x88\x4f\x3a\x91\x30\xae\x50\xcc\x56\x59\xdc\xda\xd6\x49\xee\x2c\x85\x04\x47\xd5\xb5\xad\xec\x51\x19\x39\xb7\xce\xc1\x91\x77\x0c\x43\x05\x9c\x19\x84\x7b\x97\x7c\xfe\x40\x6e\x41\x6a\xce\x64\x15\xf0\x1e\xc1\xed\xde\x33\x65\x5d\x96\x71\x95\x4c\x58\x50\xda\x82\x9e\xcf\x05\x17\x4c\xca\x35\xb0\x8c\x09\xe9\xab\x9d\x56\xf8\x0c\x81\x5d\x08\x72\x48\x4c\xd7\x5d\xc3\xac\x4d\x6f\x6e\x7a\x7c\x41\x3a\x4d\x8e\xda\x96\x68\x2d\x37\x49\x9d\x73\xc7\x3a\x4a\x25\x9a\x0e\x61\x77\x9d\x90\x45\x23\x25\xd7\x2d\xd7\x6a\x42\xba\xba\xdd\xc1\x6a\x2d\x1e\x04\xd4\x4c\x2c\x4f\x49\x36\x41\x27\x6f\x38\xb9\xdb\x6e\xb1\xbd\x59\xdb\x45\xdd\x76\x3a\xd8\xe1\x8c\x5d\x6a\x97\xb3\x1e\xa1\x0e\x5c\x32\x43\x6b\x6a\x2e\xeb\x4a\x8f\xd4\x0b\x5f\xd4\x44\x55\xae\x96\x48\x08\x21\x72\xe6\x5b\x2d\xbb\x44\xba\x17\x06\xab\x12\x76\x2f\xa4\x74\xed\x53\x94\x72\x04\x24\xd2\x54\x87\x94\x62\xe5\xfa\x34\x51\x73\xac\x63\xf8\x52\xb4\x6f\xda\x55\xb5\xa0\xe8\xb3\xf8\x92\x51\x84\x19\xcc\x85\x44\x78\x93\xeb\x40\x2f\x7a\x59\x6c\x7a\x6c\x1e\x7d\xf8\x39\x0c\xc3\xe0\x23\xfe\xf2\x21\x38\x3b\xc3\x0f\xc1\x2f\x3f\xff\xe3\x2c\x38\x7d\xff\xf7\xf7\xa7\x8c\x9f\x9e\x9e\x9e\xbe\xef\x71\x41\xa4\x4d\x90\xc5\xb3\xd3\x13\xa9\x17\x6f\xfa\x70\xe3\xba\x4d\xbe\xcc\x11\x35\x55\xa5\x78\xdd\xcd\xa6\xb1\x09\x76\xa7\xf1\x1a\x2b\xdd\xe4\x5f\x28\xf3\x71\xea\xae\xd1\xfe\xd4\x74\x3c\x9d\x0c\x47\x77\xb3\xe9\x97\xf1\x78\x34\xb9\x7d\xb5\x84\x6c\x48\xe8\x6c\x66\xd2\x24\xd1\x0d\xcf\x84\x6e\x4a\xde\xc5\xf8\x5f\xba\x8e\x94\xcb\x2e\xf9\x08\x85\xc6\x8c\x49\x87\x58\xbf\x16\x1f\x36\x33\x57\xc9\x63\x2b\x4b\xe7\x52\xf7\x42\xa1\x7a\xb5\x2c\x9d\xaf\x06\xbc\xb5\x60\x34\x67\x16\x02\xf8\x72\x33\xfc\xbd\xdf\x8e\xfd\x5e\x3d\xd6\x03\xd2\xf0\x4f\xe7\x54\x3d\x95\x4a\xd9\xaa\x6f\x5b\x3b\xc7\xbf\x7a\x7d\x3b\xa4\x70\x3d\x5f\x86\x3f\xce\xeb\x8e\x6f\xf7\xeb\x45\x0d\x18\x61\x35\x62\xb9\xe6\xde\xa4\x09\x52\x2c\xd4\x0f\x58\x0f\x7f\xc4\xba\xd5\x44\x49\x8d\xe7\xc1\x85\x99\x9f\x2e\x48\xa1\x45\x53\x0d\x1a\xc5\x84\xd1\xcb\x5d\xa7\xe7\x8e\x75\x2e\x3a\x60\x8a\xd9\x2e\x77\x71\x49\xcf\x4d\xf4\x5b\x51\xdd\xc6\xd6\x69\xe8\x90\xfe\xe2\xfb\x4b\x55\xfd\x04\x5a\x5e\x5a\xb7\x18\x35\x3a\x9c\xfa\xe5\xc0\xfd\x0e\x2c\x31\x65\xa4\x67\xac\x5b\xfb\xbc\x34\x8f\xf3\xd2\xd0\xc6\xff\xd7\x58\xb1\x93\xe9\xd1\xd7\x9b\xeb\xd1\xf9\xe5\x6c\x3c\x19\xdd\x8e\x2e\x46\xd7\xaf\xc7\xba\xbe\x57\x52\xb3\x68\x96\x90\xb6\x9a\x6b\xf9\x7d\x02\x5c\x8f\xae\xae\x07\x77\x83\xd7\xe3\x5b\xea\x85\xc4\x0c\xbf\x93\xdd\x8b\xf3\xeb\xe1\xc5\x68\x36\xfd\xf2\xe9\x66\xf0\x7a\xcd\x0e\x67\x52\x70\x1d\x98\x34\x54\xf8\x8d\xcd\xce\xf0\xf3\xf9\xd5\x60\x36\x19\x5c\x0d\x7e\x1f\xcf\x6e\x27\xe7\x37\xd3\xeb\xf3\xdb\xe1\xe8\xe6\xd5\x78\xf7\x39\x60\x46\xb8\xc0\x87\x64\x56\xcb\x02\x4f\xeb\xd9\xae\x47\x57\x57\xc3\x9b\xab\x57\x0f\x54\xa9\x17\x0b\xa1\xda\x47\x0e\x64\xfe\x87\xed\x94\x27\xe7\x5f\x67\x97\x83\xbb\xe1\xc5\x60\xfa\x6a\x6c\x13\xbb\x9f\x45\x98\x09\xde\xa8\x2b\x07\x30\x9d\x7b\x7c\xcd\xd5\xa7\xb3\xcb\xe1\xa4\xcd\xf7\xfe\x02\xf6\x67\x75\xdd\xae\x6b\x29\x58\xf2\x8f\x08\xf7\xb4\xd9\xb5\xba\xfc\x72\x0f\x6f\xb3\xd8\x7c\xeb\xf3\x9d\xd7\x6e\xfc\x9e\x3a\x77\x1f\x36\x35\x07\x3b\xdb\xea\xfd\x0d\x79\xae\xb1\xda\x2b\x04\x87\x5a\x7b\x24\x32\xd7\xe4\x9f\xd1\x3b\x77\x87\xdc\xdd\x81\x71\x8e\xc6\x54\xf6\xf6\x2f\x9c\x1c\x7e\xbd\xc3\xe9\x72\xd8\x96\x66\x2f\xe1\xf6\x87\x70\x5b\x1e\xc1\xed\x45\xd9\x36\x7f\x6c\x53\xd3\x5e\x90\xc6\x70\xd1\x99\x37\xf6\x92\xd6\xa7\xaf\xf6\x3c\x76\x0c\xb7\xa3\xcb\x91\x6b\x53\xd4\x1b\x0b\x4b\x46\x11\xd7\x11\x16\xcf\xe9\x21\xef\xfc\xfd\x9c\xe9\x72\x89\x7f\x32\xb5\x21\x5c\x0a\x93\x3f\x8c\x2a\x66\x31\xb8\x98\x0c\x21\x21\xfd\xb0\x06\xa1\x8c\x65\x32\xaf\x60\x6e\x14\xad\x5f\x28\x54\x6e\x4a\xef\x11\x9b\x57\x7a\x27\x87\x88\xb2\xef\xf5\xc0\x8e\x37\x0c\x8f\xe2\x6d\x8b\xc2\x6d\x31\x78\x10\x50\x3b\xf0\xb6\x85\xe3\xe3\x40\xb5\x08\x6d\xbf\xf2\xd8\x4b\xfc\x84\x59\xec\xc0\x49\xec\x20\x25\x6c\x1d\xcb\x76\x0e\x65\x87\x40\xb6\x0d\xd3\x78\xd3\x72\x88\x3e\xab\x0a\x56\xcf\x6d\xdb\x72\xe2\x41\x60\x7b\xad\xfc\x2d\x60\xdb\xc6\xef\x7d\xc3\xf7\x41\xdc\x6d\x51\x7b\x6b\x72\x3c\x88\x2f\x85\x56\xb5\x71\xfc\x5a\xc3\x76\x55\x1b\xd3\xdf\x55\xc2\x82\x7c\xbc\xdd\x3a\xd9\xee\x9f\x7f\xdb\xdf\x7c\x50\xc8\xf8\x09\x4b\xed\x52\x93\xf8\xaf\x3f\x73\xb2\xfa\x68\x4e\x84\x6e\x7d\x02\x52\x7c\x37\x31\xd1\x12\x3f\x09\x15\xb9\x46\x74\xf7\xb7\x20\xa4\x25\x16\xfd\x17\x4b\xc4\x95\x4b\xea\x7b\x6e\x3a\x02\xe8\xdc\xd1\x81\x34\x69\xf8\x07\x72\x57\xfb\x83\xe2\xf4\xb4\xf1\xa1\xc2\xe1\xdf\xa3\x38\x0d\x74\xef\xfb\x36\x9d\x7c\xc7\x67\x30\xe4\xaa\x92\x3b\x1f\x54\x3a\xa9\xbd\xa0\xfb\xe9\x27\xff\x93\xd0\xe8\x94\x38\xd6\x76\xaa\x0f\x37\x72\x0b\x67\x48\x61\x7d\xd7\xbf\x77\x78\x0e\xab\x6e\x91\xa9\xba\x3a\x70\x4d\x29\x52\x29\x43\x4b\x82\x82\xfb\x06\xef\x2d\xbe\x2b\xae\x03\x58\x78\x25\x05\x20\x85\xc9\x7f\xdc\x33\xcb\x97\x2f\x24\x41\x19\x2e\xa9\x41\x72\x3b\x4f\x16\x24\x00\x83\x9c\xf2\xe4\xd1\x12\xea\x45\x23\xab\x2c\x37\x4a\x47\x18\x84\xc5\xb1\x67\x0c\xb3\x8e\xa9\xeb\xf1\xf6\x2d\xe0\x57\x45\x07\x97\xc3\xe6\xbe\xdf\xf7\x5f\x04\xbd\x70\xea\x89\x37\x46\x7e\x01\xfd\xec\x72\xa4\x1f\x24\x2d\x05\x9c\xa2\xc7\x32\x10\x4b\xc4\xe6\x03\xc0\x02\x79\x77\x56\x4a\x8d\xd5\x71\xb9\x11\xa1\xff\x5e\xab\x2a\x43\xdb\x93\xd4\xae\x8b\xcb\xa9\x73\xf5\xd1\xec\xbc\xaf\x38\xe3\xab\x5a\xcc\x92\x44\xa8\xc5\xd6\xab\x8a\xac\x92\xff\xf3\xe2\x51\xd9\xd0\xee\xf3\x3b\x9b\x83\x7d\x5e\x07\xab\x6b\x22\x2b\x45\x6d\x01\x7e\x47\x6d\xfb\x5f\x00\x00\x00\xff\xff\x4a\x63\x3f\x61\x49\x2a\x00\x00")

func deployDataVirtletDsYamlBytes() ([]byte, error) {
	return bindataRead(
		_deployDataVirtletDsYaml,
		"deploy/data/virtlet-ds.yaml",
	)
}

func deployDataVirtletDsYaml() (*asset, error) {
	bytes, err := deployDataVirtletDsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "deploy/data/virtlet-ds.yaml", size: 10825, mode: os.FileMode(420), modTime: time.Unix(1522279343, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"deploy/data/virtlet-ds.yaml": deployDataVirtletDsYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"deploy": &bintree{nil, map[string]*bintree{
		"data": &bintree{nil, map[string]*bintree{
			"virtlet-ds.yaml": &bintree{deployDataVirtletDsYaml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

